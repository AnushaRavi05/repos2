1.Find the difference between the total number of CITY entries in the table and 
the number of distinct CITY entries in the table.
The table name is STATION 
SELECT 
(COUNT(CITY)-COUNT(DISTINCT CITY)) AS difference
FROM STATION;
2.Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
The STATION table is described as follows:
(SELECT CITY,LENGTH(CITY) AS name_length
FROM STATION
ORDER BY LENGTH(CITY) ASC,CITY ASC
FETCH FIRST 1 ROW ONLY)
UNION ALL
(SELCT CITY,LENGTH(CITY) AS name_length
FROM STATION 
ORDER BY LENGTH(CITY) DESC,CITY ASC
FETCH FIRST 1 ROW ONLY;)
3.Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first
and last characters. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE (CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%'
       OR CITY LIKE 'a%' OR CITY LIKE 'e%' OR CITY LIKE 'i%' OR CITY LIKE 'o%' OR CITY LIKE 'u%')
  AND (CITY LIKE '%A' OR CITY LIKE '%E' OR CITY LIKE '%I' OR CITY LIKE '%O' OR CITY LIKE '%U'
       OR CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u');
4.Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE CITY NOT LIKE 'A%'
  AND CITY NOT LIKE 'E%'
  AND CITY NOT LIKE 'I%'
  AND CITY NOT LIKE 'O%'
  AND CITY NOT LIKE 'U%'
  AND CITY NOT LIKE 'a%'
  AND CITY NOT LIKE 'e%'
  AND CITY NOT LIKE 'i%'
  AND CITY NOT LIKE 'o%'
  AND CITY NOT LIKE 'u%';
5.Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result 
should not contain duplicates
SELECT DISTINCT CITY
FROM STATION
WHERE ((CITY NOT LIKE 'A%' 
       AND CITY NOT LIKE 'E%' 
       AND CITY NOT LIKE 'I%' 
       AND CITY NOT LIKE 'O%' 
       AND CITY NOT LIKE 'U%'
       AND CITY NOT LIKE 'a%' 
       AND CITY NOT LIKE 'e%' 
       AND CITY NOT LIKE 'i%' 
       AND CITY NOT LIKE 'o%' 
       AND CITY NOT LIKE 'u%' )
   OR(CITY NOT LIKE '%A'
       AND CITY NOT LIKE '%E'
       AND CITY NOT LIKE '%I'
       AND CITY NOT LIKE '%O'
       AND CITY NOT LIKE '%U'
        AND CITY NOT LIKE '%a'
        AND CITY NOT LIKE '%e'
        AND CITY NOT LIKE '%i'
        AND CITY NOT LIKE '%o'
        AND CITY NOT LIKE '%u'
       ));
6.Query the list of CITY names from STATION that do not start with vowels and
do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE LEFT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u')
  AND RIGHT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u');
6.Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three 
characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
SELECT NAME
FROM STUDENTS
WHERE MARKS > {Marks}
ORDER BY SUBSTRING(NAME, LENGTH(NAME) - 2, 3), ID ASC;
7.Write a query that prints a list of employee names (i.e.: the name attribute)
from the Employee table in alphabetical order.
SELECT name
FROM Employee
ORDER BY name ASC;
8.Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. 
Sort your result by ascending employee_id.
SELECT name
FROM Employee
ORDER BY name ASC,ID ASC;
9.Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of 2 decimal places.
The sum of all values in LONG_W rounded to a scale of 2 decimal places.
SELECT 
    CAST(ROUND(SUM(LAT_N), 2) AS DECIMAL(10, 2)) AS Sum_LAT_N,
    CAST(ROUND(SUM(LONG_W), 2) AS DECIMAL(10, 2)) AS Sum_LONG_W
FROM STATION;
10.Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345
Truncate your answer to 4 decimal places.
SELECT 
    CAST(SUM(LAT_N) AS DECIMAL(10, 4)) AS Truncated_Sum_LAT_N
FROM STATION
WHERE LAT_N > 38.7880 AND LAT_N < 137.2345;





